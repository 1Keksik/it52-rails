upstream metabase_app {
   server 0.0.0.0:3010;
}

server {
    if ($host = metabase.it52.info) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


   listen 80;
   server_name metabase.it52.info;

   location /.well-known/acme-chadllenge/ {
       root /var/www/certbot;
   }

   location / {
     return 301 https://$host$request_uri;
   }


}

server {

   listen 443 ssl http2;

   server_name metabase.it52.info;
   # define the public application root
   root   /opt/it52/public;
   index  index.html;
   # define where Nginx should write its logs
   access_log /opt/it52/log/nginx.access.log;
   error_log /opt/it52/log/nginx.error.log;

   include /etc/letsencrypt/options-ssl-nginx.conf;
   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

   # deny requests for files that should never be accessed
   location ~ /\. {
      deny all;
   }

   location ~* ^.+\.(rb|log|ts)$ {
      deny all;
   }

   # serve static (compiled) assets directly if they exist (for rails production)
   # send non-static file requests to the app server
   location / {
      try_files $uri @metabase;
   }

   location @metabase {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Host $http_host;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_set_header  X-Forwarded-Ssl on;
      proxy_set_header  X-Forwarded-Host $host;
      proxy_redirect    off;
      proxy_pass http://metabase_app;
   }

    ssl_certificate /etc/letsencrypt/live/metabase.it52.info/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/metabase.it52.info/privkey.pem; # managed by Certbot
}
